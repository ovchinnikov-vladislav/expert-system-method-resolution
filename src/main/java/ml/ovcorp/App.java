/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ml.ovcorp;

import java.util.Arrays;
import java.util.List;
import java.util.Set;

import static ml.ovcorp.Term.*;

public class App {

    public static void main(String[] args) {
        List<Term> cnf = example1();
        Term.printCnf(cnf);
        Pair<Boolean, Set<Term>> result = ResolutionMethod.start(cnf);

        if (result.getFirst()) {
            System.out.println("Нулевой дизъюнкт был построен");
        } else {
            System.out.println("Нулевой дизъюнкт не был построен");
        }

        System.out.println("\nСписок всех термов");
        for (Term t : result.getSecond()) {
            System.out.println(t);
        }
    }

    private static List<Term> example1() {
        Term A = new Term("A");
        Term B = new Term("B");

        Term v1 = not(A).or(B);
        Term v2 = not(A);

        return Arrays.asList(v1, v2);
    }

    private static List<Term> example2() {
        Term A = new Term("A");
        Term B = new Term("B");
        Term C = new Term("C");

        Term v1 = A.or(B).or(C);
        Term v2 = not(A.or(B));
        Term v3 = A.or(not(C));
        Term v4 = not(A);
        Term v5 = not(B);

        return Arrays.asList(v1, v2, v3, v4, v5);
    }

    private static List<Term> example3() {
        Term A = new Term("A");
        Term B = new Term("B");
        Term C = new Term("C");
        Term D = new Term("D");

        Term V1 = A.or(B).or(not(C));
        Term V2 = not(A).or(not(B)).or(not(C));
        Term V3 = A.or(B).or(not(C)).or(D);
        Term V4 = A.or(D);
        Term V5 = A.or(C);
        Term V6 = A.or(B).or(D);
        return Arrays.asList(V1, V2, V3, V4, V5, V6);
    }
}
